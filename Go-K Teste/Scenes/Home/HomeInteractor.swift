//
//  HomeInteractor.swift
//  Go-K Teste
//
//  Created by Junior Silva on 07/10/20.
//  Copyright (c) 2020 Junior Silva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import UIKit

protocol HomeBusinessLogic {
    func numberOfRows(for section: Int) -> Int
    var numberOfSections: Int { get }
    
    func cellForRow(for section: Int) -> AnyObject?
    func didSelectRowAt(indexPath: IndexPath)
    func didSelectProduct(_ product: Product)
    func fetchList()
}

protocol HomeDataStore {
    var spotlights: [Spotlight]?  { get set }
    var cash: Cash? { get set }
    var products: [Product]? { get set }
    
    var selectedSpotlight: Spotlight? { get set }
    var selectedCash: Cash? { get set }
    var selectedProduct: Product? { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    
    var presenter: HomePresentationLogic?
    var worker: HomeNetworkLogic?
    
    var spotlights: [Spotlight]?
    var cash: Cash?
    var products: [Product]?
    var sections: [AnyObject]?
    
    var selectedSpotlight: Spotlight?
    var selectedCash: Cash?
    var selectedProduct: Product?
    
    init(worker: HomeNetworkLogic = HomeWorker()) {
        self.worker = worker
    }
    
    func fetchList() {
        worker?.searchList().done(handleSuccess).catch(handleError).finally {
            self.presenter?.stopsActivityIndicator()
        }
    }
    
    private func handleSuccess(_ response: Home.Response) {
        spotlights = response.spotlight
        cash = response.cash
        products = response.products
        sections = [spotlights, cash, products] as [AnyObject]
        presenter?.reloadTableView()
    }
    
    private func handleError(_ error: Error) {
        presenter?.presentEmptyState()
    }
    
    var numberOfSections: Int {
        return sections?.count ?? 0
    }
    
    func numberOfRows(for section: Int) -> Int {
        return 1
    }
    
    func didSelectRowAt(indexPath: IndexPath) {
        switch indexPath.section {
        case 0:
            guard let itemSelection = sections?[0] as? [Spotlight] else { return }
            selectedSpotlight = itemSelection[indexPath.row]
            presenter?.presentSelectedSpotlight()
            break
        case 1:
            guard let item = cash as Cash? else { return }
            selectedCash = item
            presenter?.presentSelectedCash()
        default:
            break
        }
    }
    
    func cellForRow(for section: Int) -> AnyObject? {
        switch section {
        case 0:
            return spotlights as AnyObject?
        case 1:
            return cash as AnyObject?
        default:
            return products as AnyObject?
        }
    }
    
    func didSelectProduct(_ product: Product) {
        selectedProduct = product
        presenter?.presentSelectedProduct()
    }
    
}
