//
//  HomeInteractor.swift
//  Go-K Teste
//
//  Created by Junior Silva on 07/10/20.
//  Copyright (c) 2020 Junior Silva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
// This tag below is used to create the testable files from the Cuckoo pod
// CUCKOO_TESTABLE

import UIKit

protocol HomeBusinessLogic {
    func numberOfRows(for section: Int) -> Int
    var numberOfSections: Int { get }
    
    func cellForRow(for section: Int, at indexPath: IndexPath) -> AnyObject?
    func didSelectRowAt(indexPath: IndexPath)
    func fetchList()
}

protocol HomeDataStore {
    var selectedItem: Home.Response? { get set }
    var spotlights: [Spotlight]?  { get set }
    var cash: Cash? { get set }
    var products: [Products]? { get set }
}

class HomeInteractor: HomeBusinessLogic, HomeDataStore {
    var presenter: HomePresentationLogic?
    var worker: HomeWorker?
    
    var homeList = [Home.Response]()
    var selectedItem: Home.Response?
    
    var spotlights: [Spotlight]?
    var cash: Cash?
    var products: [Products]?
    var sections: [AnyObject]?
    
    init(worker: HomeWorker = HomeWorker()) {
        self.worker = worker
    }
    
    var numberOfSections: Int {
        return sections?.count ?? 0
    }
    
    func numberOfRows(for section: Int) -> Int {
        if section == 0 {
            return spotlights?.count ?? 0
        } else if section == 1 {
            return 1
        } else {
            return products?.count ?? 0
        }
    }
    
    func didSelectRowAt(indexPath: IndexPath) {
        selectedItem = homeList[indexPath.row]
        presenter?.presentSelectedItem()
    }
    
    func cellForRow(for section: Int, at indexPath: IndexPath) -> AnyObject? {
        switch section {
        case 0:
            return spotlights as AnyObject?
        case 1:
            return cash as AnyObject?
        default:
            return products as AnyObject?
        }
    }
    
    func fetchList() {
        worker?.searchList().done(handleSuccess).catch(handleError).finally {
            self.presenter?.stopsActivityIndicator()
        }
    }
    
    private func handleSuccess(_ response: Home.Response) {
        spotlights = response.spotlight
        cash = response.cash
        products = response.products
        sections = [spotlights, cash, products] as [AnyObject]
        presenter?.reloadTableView()
    }
    
    private func handleError(_ error: Error) {
        
    }
    
}
