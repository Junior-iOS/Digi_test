//
//  HomeViewController.swift
//  Go-K Teste
//
//  Created by Junior Silva on 07/10/20.
//  Copyright (c) 2020 Junior Silva. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class {
    func reloadTableView()
    func stopsActivityIndicator()
    func displaySelectedSpotlight()
    func displaySelectedCash()
    func displaySelectedProduct()
}

class HomeViewController: UIViewController {
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    private func setup() {
        let viewController = self
        let interactor = HomeInteractor()
        let presenter = HomePresenter()
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupTableView()
        interactor?.fetchList()
        navigationItem.title = "Digio"
    }
    
    private func setupTableView() {
        tableView.delegate = self
        tableView.dataSource = self
        tableView.separatorStyle = .none
        tableView.register(UINib(nibName: "SpotlightCell", bundle: nil), forCellReuseIdentifier: SpotlightCell.spotlightCellIdentifier)
        tableView.register(UINib(nibName: "CashCell", bundle: nil), forCellReuseIdentifier: CashCell.cashCellIdentifier)
        tableView.register(UINib(nibName: "ProductCell", bundle: nil), forCellReuseIdentifier: ProductCell.productCellIdentifier)
    }
    
}

extension HomeViewController: HomeDisplayLogic {
    func reloadTableView() {
        tableView.reloadData()
    }
    
    func stopsActivityIndicator() {
        activityIndicator.stopAnimating()
    }
    
    func displaySelectedSpotlight() {
        router?.routeToSelectedSpotlight()
    }
    
    func displaySelectedCash() {
        router?.routeToSelectedCash()
    }
    
    func displaySelectedProduct() {
        router?.routeToSelectedProduct()
    }
}

// MARK: COLLECTION CELLS PROTOCOLS
extension HomeViewController: SpotlightCellDelegate {
    func didSelectRowAt(_ indexPath: IndexPath) {
        interactor?.didSelectRowAt(indexPath: indexPath)
    }
}

extension HomeViewController: ProductCellDelegate {
    func didSelectRow(at product: Product) {
        interactor?.didSelectProduct(product)
    }
}

// MARK: TABLEVIEW PROTOCOLS
extension HomeViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        interactor?.didSelectRowAt(indexPath: indexPath)
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return interactor?.numberOfSections ?? 0
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return interactor?.numberOfRows(for: section) ?? 0
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        switch indexPath.section {
        case 0:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: SpotlightCell.spotlightCellIdentifier, for: indexPath) as? SpotlightCell else { return UITableViewCell() }
            cell.configure(interactor?.cellForRow(for: indexPath.section, at: indexPath) as? [Spotlight])
            cell.delegate = self
            return cell
        case 1:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: CashCell.cashCellIdentifier, for: indexPath) as? CashCell else { return UITableViewCell() }
            cell.configure(interactor?.cellForRow(for: indexPath.section, at: indexPath) as? Cash)
            return cell
            
        default:
            guard let cell = tableView.dequeueReusableCell(withIdentifier: ProductCell.productCellIdentifier, for: indexPath) as? ProductCell else { return UITableViewCell() }
            cell.configure(interactor?.cellForRow(for: indexPath.section, at: indexPath) as? [Product])
            cell.delegate = self
            return cell
        }
    }
    
    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        switch section {
        case 0:
            return "OlÃ¡, Maria"
        case 2:
            return "Produtos"
        default:
            return nil
        }
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return 20
    }
}
